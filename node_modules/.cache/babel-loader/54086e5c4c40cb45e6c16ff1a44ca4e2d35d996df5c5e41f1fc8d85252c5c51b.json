{"ast":null,"code":"var _jsxFileName = \"/Users/bytedance/PersonalityQuiz/my-personality-quiz/src/QuestionPage.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionPage = ({\n  question,\n  optionA,\n  optionB,\n  displayNextQuestion,\n  currentQuestionIndex,\n  totalQuestions,\n  svgUrls,\n  backgroundImage,\n  fontColorRanges\n}) => {\n  // Function to determine font color based on current question index\n  const getFontColor = () => {\n    for (let i = 0; i < fontColorRanges.length; i++) {\n      const range = fontColorRanges[i];\n      if (currentQuestionIndex >= range.start && currentQuestionIndex <= range.end) {\n        return range.color; // Return the color for the current range\n      }\n    }\n    return '#ffffff'; // Default font color if no range matches\n  };\n\n  // Get font color for the current question index\n  const fontColor = getFontColor();\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"question-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-content\",\n      style: {\n        backgroundImage: `url('${backgroundImage}')`,\n        backgroundSize: 'contain',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: fontColor\n        },\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => displayNextQuestion('A'),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: optionA\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 58\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => displayNextQuestion('B'),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: optionB\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 58\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c = QuestionPage;\nexport default QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","QuestionPage","question","optionA","optionB","displayNextQuestion","currentQuestionIndex","totalQuestions","svgUrls","backgroundImage","fontColorRanges","getFontColor","i","length","range","start","end","color","fontColor","className","children","style","backgroundSize","backgroundPosition","backgroundRepeat","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bytedance/PersonalityQuiz/my-personality-quiz/src/QuestionPage.js"],"sourcesContent":["import React from 'react';\n\nconst QuestionPage = ({ question, optionA, optionB, displayNextQuestion, currentQuestionIndex, totalQuestions, svgUrls, backgroundImage, fontColorRanges }) => {\n  // Function to determine font color based on current question index\n  const getFontColor = () => {\n    for (let i = 0; i < fontColorRanges.length; i++) {\n      const range = fontColorRanges[i];\n      if (currentQuestionIndex >= range.start && currentQuestionIndex <= range.end) {\n        return range.color; // Return the color for the current range\n      }\n    }\n    return '#ffffff'; // Default font color if no range matches\n  };\n\n  // Get font color for the current question index\n  const fontColor = getFontColor();\n\n  return (\n    <section className=\"question-page\">\n      <div className=\"question-content\" style={{ \n        backgroundImage: `url('${backgroundImage}')`,\n        backgroundSize: 'contain',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n      }}>\n        <h2 style={{ color: fontColor }}>{question}</h2>\n      </div>\n      <div className=\"options\">\n        <button onClick={() => displayNextQuestion('A')}><span>{optionA}</span></button>\n        <button onClick={() => displayNextQuestion('B')}><span>{optionB}</span></button>\n      </div>\n    </section>\n  );\n};\n\nexport default QuestionPage;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,OAAO;EAAEC,OAAO;EAAEC,mBAAmB;EAAEC,oBAAoB;EAAEC,cAAc;EAAEC,OAAO;EAAEC,eAAe;EAAEC;AAAgB,CAAC,KAAK;EAC7J;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,eAAe,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MAC/C,MAAME,KAAK,GAAGJ,eAAe,CAACE,CAAC,CAAC;MAChC,IAAIN,oBAAoB,IAAIQ,KAAK,CAACC,KAAK,IAAIT,oBAAoB,IAAIQ,KAAK,CAACE,GAAG,EAAE;QAC5E,OAAOF,KAAK,CAACG,KAAK,CAAC,CAAC;MACtB;IACF;IACA,OAAO,SAAS,CAAC,CAAC;EACpB,CAAC;;EAED;EACA,MAAMC,SAAS,GAAGP,YAAY,CAAC,CAAC;EAEhC,oBACEX,OAAA;IAASmB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAChCpB,OAAA;MAAKmB,SAAS,EAAC,kBAAkB;MAACE,KAAK,EAAE;QACvCZ,eAAe,EAAG,QAAOA,eAAgB,IAAG;QAC5Ca,cAAc,EAAE,SAAS;QACzBC,kBAAkB,EAAE,QAAQ;QAC5BC,gBAAgB,EAAE;MACpB,CAAE;MAAAJ,QAAA,eACApB,OAAA;QAAIqB,KAAK,EAAE;UAAEJ,KAAK,EAAEC;QAAU,CAAE;QAAAE,QAAA,EAAElB;MAAQ;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACN5B,OAAA;MAAKmB,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBpB,OAAA;QAAQ6B,OAAO,EAAEA,CAAA,KAAMxB,mBAAmB,CAAC,GAAG,CAAE;QAAAe,QAAA,eAACpB,OAAA;UAAAoB,QAAA,EAAOjB;QAAO;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAChF5B,OAAA;QAAQ6B,OAAO,EAAEA,CAAA,KAAMxB,mBAAmB,CAAC,GAAG,CAAE;QAAAe,QAAA,eAACpB,OAAA;UAAAoB,QAAA,EAAOhB;QAAO;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7E,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEd,CAAC;AAACE,EAAA,GA/BI7B,YAAY;AAiClB,eAAeA,YAAY;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}