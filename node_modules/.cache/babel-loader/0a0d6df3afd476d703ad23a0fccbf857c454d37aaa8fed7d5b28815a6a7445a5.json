{"ast":null,"code":"var _jsxFileName = \"/Users/bytedance/PersonalityQuiz/my-personality-quiz/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport LoaderPage from './LoaderPage';\nimport StartPage from './StartPage'; // Import StartPage component\nimport QuestionPage from './QuestionPage'; // Import QuestionPage component\nimport ResultPage from './ResultPage'; // Import ResultPage component\nimport svgUrls from './svgurl'; // Import SVG URLs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userSelections, setUserSelections] = useState([]);\n  const [mbtiType, setMbtiType] = useState('');\n  const [showLoader, setShowLoader] = useState(false);\n  const [backgroundImage, setBackgroundImage] = useState('url(\"\")');\n  const [isQuestionPage, setIsQuestionPage] = useState(false); // State to track if it's a question page\n\n  const questions = [\n    // Questions array...\n  ];\n  const displayNextQuestion = selectedOption => {\n    setUserSelections(prevSelections => [...prevSelections, selectedOption]);\n    setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n  };\n  const restartQuiz = () => {\n    setCurrentQuestionIndex(0);\n    setUserSelections([]);\n    console.log(\"Quiz restarted. User Selections cleared.\");\n  };\n  const calculateMBTI = () => {\n    // Calculation logic...\n  };\n  const handleQuizCompletion = () => {\n    // Handling quiz completion...\n  };\n  useEffect(() => {\n    // Effect for handling quiz completion...\n  }, [currentQuestionIndex, questions.length]);\n  useEffect(() => {\n    // Effect for setting background image...\n  }, [currentQuestionIndex, questions.length, svgUrls]);\n  useEffect(() => {\n    // Effect for updating isQuestionPage state\n    setIsQuestionPage(currentQuestionIndex > 0 && currentQuestionIndex <= questions.length);\n  }, [currentQuestionIndex, questions.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `container ${isQuestionPage ? 'question-page-container' : ''}`,\n    style: {\n      backgroundImage\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      children: [showLoader && /*#__PURE__*/_jsxDEV(LoaderPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 24\n      }, this), currentQuestionIndex === 0 && !showLoader && /*#__PURE__*/_jsxDEV(StartPage, {\n        displayNextQuestion: displayNextQuestion,\n        svgUrls: svgUrls,\n        backgroundImage: backgroundImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), currentQuestionIndex > 0 && currentQuestionIndex <= questions.length && !showLoader && /*#__PURE__*/_jsxDEV(QuestionPage, {\n        question: questions[currentQuestionIndex - 1].question,\n        optionA: questions[currentQuestionIndex - 1].optionA,\n        optionB: questions[currentQuestionIndex - 1].optionB,\n        displayNextQuestion: displayNextQuestion,\n        currentQuestionIndex: currentQuestionIndex,\n        totalQuestions: questions.length,\n        svgUrls: svgUrls,\n        backgroundImage: backgroundImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), currentQuestionIndex > questions.length && !showLoader && /*#__PURE__*/_jsxDEV(ResultPage, {\n        restartQuiz: restartQuiz,\n        calculateMBTI: calculateMBTI,\n        userSelections: userSelections\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7ubm2q02ZADFvwPDYyq6p0keECs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LoaderPage","StartPage","QuestionPage","ResultPage","svgUrls","jsxDEV","_jsxDEV","App","_s","currentQuestionIndex","setCurrentQuestionIndex","userSelections","setUserSelections","mbtiType","setMbtiType","showLoader","setShowLoader","backgroundImage","setBackgroundImage","isQuestionPage","setIsQuestionPage","questions","displayNextQuestion","selectedOption","prevSelections","prevIndex","restartQuiz","console","log","calculateMBTI","handleQuizCompletion","length","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","question","optionA","optionB","totalQuestions","_c","$RefreshReg$"],"sources":["/Users/bytedance/PersonalityQuiz/my-personality-quiz/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport LoaderPage from './LoaderPage';\nimport StartPage from './StartPage'; // Import StartPage component\nimport QuestionPage from './QuestionPage'; // Import QuestionPage component\nimport ResultPage from './ResultPage'; // Import ResultPage component\nimport svgUrls from './svgurl'; // Import SVG URLs\n\nfunction App() {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userSelections, setUserSelections] = useState([]);\n  const [mbtiType, setMbtiType] = useState('');\n  const [showLoader, setShowLoader] = useState(false);\n  const [backgroundImage, setBackgroundImage] = useState('url(\"\")');\n  const [isQuestionPage, setIsQuestionPage] = useState(false); // State to track if it's a question page\n\n  const questions = [\n    // Questions array...\n  ];\n\n  const displayNextQuestion = (selectedOption) => {\n    setUserSelections(prevSelections => [...prevSelections, selectedOption]);\n    setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n  };\n\n  const restartQuiz = () => {\n    setCurrentQuestionIndex(0);\n    setUserSelections([]);\n    console.log(\"Quiz restarted. User Selections cleared.\");\n  };\n\n  const calculateMBTI = () => {\n    // Calculation logic...\n  };\n\n  const handleQuizCompletion = () => {\n    // Handling quiz completion...\n  };\n\n  useEffect(() => {\n    // Effect for handling quiz completion...\n  }, [currentQuestionIndex, questions.length]);\n  \n  useEffect(() => {\n    // Effect for setting background image...\n  }, [currentQuestionIndex, questions.length, svgUrls]);\n  \n  useEffect(() => {\n    // Effect for updating isQuestionPage state\n    setIsQuestionPage(currentQuestionIndex > 0 && currentQuestionIndex <= questions.length);\n  }, [currentQuestionIndex, questions.length]);\n\n  return (\n    <div className={`container ${isQuestionPage ? 'question-page-container' : ''}`} style={{backgroundImage}}>\n      <main>\n        {showLoader && <LoaderPage />}\n\n        {/* Start Page */}\n        {currentQuestionIndex === 0 && !showLoader && (\n          <StartPage \n            displayNextQuestion={displayNextQuestion} \n            svgUrls={svgUrls} \n            backgroundImage={backgroundImage} \n          />\n        )}\n\n        {/* Question Pages */}\n        {currentQuestionIndex > 0 && currentQuestionIndex <= questions.length && !showLoader && (\n          <QuestionPage \n            question={questions[currentQuestionIndex - 1].question} \n            optionA={questions[currentQuestionIndex - 1].optionA} \n            optionB={questions[currentQuestionIndex - 1].optionB} \n            displayNextQuestion={displayNextQuestion} \n            currentQuestionIndex={currentQuestionIndex} \n            totalQuestions={questions.length} \n            svgUrls={svgUrls} \n            backgroundImage={backgroundImage} \n          />\n        )}\n\n        {/* Result Page */}\n        {currentQuestionIndex > questions.length && !showLoader && (\n          <ResultPage \n            restartQuiz={restartQuiz} \n            calculateMBTI={calculateMBTI} \n            userSelections={userSelections} \n          />\n        )}\n      </main>\n      <footer>\n        {/* Footer content */}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}